source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_5bae7409-92a9-48f7-a3af-138b90f81352/REditorWrapper.R')
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_5bae7409-92a9-48f7-a3af-138b90f81352/REditorWrapper.R')
source('C:/Users/boefraty/projects/PBI/R/Interactive/TutorialFunnelPlot/funnelRvisual/script.r')
source('C:/Users/boefraty/projects/PBI/R/Interactive/TutorialFunnelPlot/funnelRvisual/script.r')
source('C:/Users/boefraty/projects/PBI/R/Interactive/TutorialFunnelPlot/funnelRvisual/script_old.r')
source('C:/Users/boefraty/projects/PBI/R/Interactive/TutorialFunnelPlot/funnelRvisual/script_old.r')
source('C:/Users/boefraty/projects/PBI/R/Interactive/TutorialFunnelPlot/funnelRvisual/script.r')
install.packages("stringr")
sessionInfo()
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_31dd2b14-d4b4-4477-81ef-149f2c706f67/REditorWrapper.R')
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_088bbc35-2dfc-4d96-b91e-b19ca738fd98/REditorWrapper.R')
install.packages("ggrepel")
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_088bbc35-2dfc-4d96-b91e-b19ca738fd98/REditorWrapper.R')
install.packages("ggthemes")
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_088bbc35-2dfc-4d96-b91e-b19ca738fd98/REditorWrapper.R')
sessionInfo()
install.packages("igraph")
install.packages("wordcloud")
si = sessionInfo(); "XML" %in% names(si$otherPkgs)
si$otherPkgs
names(si$otherPkgs)
union(names(si$otherPkgs), names(si$basePkgs))
names(si$basePkgs)
names(si$loadedOnly)
union(names(si$otherPkgs), names(si$basePkgs),si$loadedOnly)
union(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
union(c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
)
c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
library(XML)
c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
si = sessionInfo()
c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
si = sessionInfo()
namesPackages =  c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
checkPackages = c("XML","plotly","ggplot2","htmlwidgets","scales")
checkPackages = c("XML","plotly","ggplot2","htmlwidgets","scales")
flagAllPackages = prod(checkPackages %in% namesPackages)
flagAllPackages
checkPackages %in% namesPackages
detach("XML")
detach(XML)
library(XML)
library("XML", lib.loc="~/R/win-library/3.2")
detach("package:XML", unload=TRUE)
si = sessionInfo()
si = sessionInfo()
namesPackages =  c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))
checkPackages = c("XML","plotly","ggplot2","htmlwidgets","scales")
checkPackages = c("XML","plotly","ggplot2","htmlwidgets","scales")
flagAllPackages = prod(checkPackages %in% namesPackages)
flagAllPackages
checkPackages %in% namesPackages
warning("ssss")
install.packages("scales")
installed.packages("corrplot")
installed.packages("rattle")
install.packages("rattle")
install.packages("corrplot")
install.packages("car")
install.packages("scatterplot3d")
install.packages("gridExtra")
install.packages("networkD3")
install.packages("jk")
install.packages("plotly")
install.packages("shiny")
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_1b038fd1-aa6c-4842-a6b7-3e3d19ab98d2/REditorWrapper.R')
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_1b038fd1-aa6c-4842-a6b7-3e3d19ab98d2/REditorWrapper.R')
Orders_Basket_Table <- inspect(sort(arAll, by = "confidence"),
ruleSep = "", setStart = "",
setEnd = "")
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_1b038fd1-aa6c-4842-a6b7-3e3d19ab98d2/REditorWrapper.R')
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_1b038fd1-aa6c-4842-a6b7-3e3d19ab98d2/REditorWrapper.R')
source('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_7af247b5-51f3-48ae-b34b-f746b51a6f3b/REditorWrapper.R')
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_7af247b5-51f3-48ae-b34b-f746b51a6f3b/REditorWrapper.R')
dataset = dataset[1:10000,:]
dataset = dataset[1:10000,]
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_7af247b5-51f3-48ae-b34b-f746b51a6f3b/REditorWrapper.R')
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_7af247b5-51f3-48ae-b34b-f746b51a6f3b/REditorWrapper.R')
debugSource('C:/Users/boefraty/AppData/Local/Radio/REditorWrapper_7af247b5-51f3-48ae-b34b-f746b51a6f3b/REditorWrapper.R')
sessionInfo()
sessionInfo()
install.packages("AzureML")
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
install.packages("dplyr")
library(dplyr)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
install.packages("httpuv")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(plotly)
library(rjson)
install.packages("rjson")
library(plotly)
library(rjson)
json_file <- "https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
p <- plot_ly(
type = "sankey",
domain = c(
x =  c(0,1),
y =  c(0,1)
),
orientation = "h",
valueformat = ".0f",
valuesuffix = "TWh",
node = list(
label = json_data$data[[1]]$node$label,
color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = json_data$data[[1]]$link$source,
target = json_data$data[[1]]$link$target,
value =  json_data$data[[1]]$link$value,
label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
font = list(
size = 10,
color = 'white'
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F),
plot_bgcolor = 'black',
paper_bgcolor = 'black'
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="sankey/dark")
chart_link
p
library(readPNG)
install.packages("readPNG")
install.packages("readPNG")
library(readPNG)
library(png)
install.packages("png")
library(png)
library(png1)
install.packages("janitor")
7*0.8
7*1.2
[247,253]
c(247,253)/60
0.116*60
0.217*60
install.packages("GGally")
1000*10/60/60
10000*10/60/60
10000*10/60/60
1000*10/60/60
1100*10/60/60
install.packages("Rgraphviz")
install.packages("tm")
2
install.packages("outlier")
install.packages("outliers")
set.seed(1234)
y=rnorm(100)
outlier(y)
library(outlier) # upload package
set.seed(1234);y=rnorm(100) # random data
outlier(y)
library(outlier)
library(outliers) # upload package
set.seed(1234);y=rnorm(100) # random data
outlier(y)
?outlier
set.seed(1234)
x = rnorm(10)
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
set.seed(1234); x = rnorm(10) # random data
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#example
set.seed(1234); x = rnorm(10) # random data
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#> [1] 0.68458034 0.44007451 2.17210689 3.88421971 0.66539631  . . .
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.95)  # beyond 95th %ile based on t-scores
x(5)
x[5]
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 10; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq")  # chi-sq scores => (x - mean(x))^2/var(x)
#> [1] 0.68458034 0.44007451 2.17210689 3.88421971 0.66539631  . . .
scores(x, type="t")  # t scores
scores(x, type="chisq", prob=0.9)  # beyond 90th %ile based on chi-sq
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
scores(x, type="chisq", prob=0.95)  # beyond 95th %ile
scores(x, type="z", prob=0.95)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.95)  # beyond 95th %ile based on t-scores
set.seed(1234); x = rnorm(10) # random data
x[5] = 10; #outlier
scores(x)  # z-scores => (x-mean)/sd
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.999)  # beyond 95th %ile
scores(x, type="z", prob=0.999)  # beyond 95th %ile based on z-scores
scores(x, type="t", prob=0.999)  # beyond 95th %ile based on t-scores
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.999)  # beyond 99.9th %ile
scores(x, type="z", prob=0.999)  # beyond 99.9th %ile based on z-scores
scores(x, type="t", prob=0.999)  # beyond 99.9th %ile based on t-scores
#example
set.seed(1234); x = rnorm(10) # random data
x[5] = 42; #outlier
scores(x)  # z-scores => (x-mean)/sd
scores(x, type="chisq", prob=0.99)  # beyond 99th %ile
scores(x, type="z", prob=0.99)  # beyond 99th %ile based on z-scores
scores(x, type="t", prob=0.99)  # beyond 99th %ile based on t-scores
debugSource('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
iconv('row', "latin1", "ASCII", sub="")
iconv('row aa dd', "latin1", "ASCII", sub="")
iconv('row aa dd 1', "latin1", "ASCII", sub="")
?iconv
dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
View(dataset)
View(dataset)
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
View(dataset)
View(dataset)
(dataset$Text == dataset$Text1)
class(dataset$Text)
class(dataset$Text1)
?iconv
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
require("NLP")
require("tm")
require("RColorBrewer")
require("wordcloud")
library(NLP)
library(tm)
library(RColorBrewer)
library(wordcloud)
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), "taco"))
return(corpus)
}
#dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
install.packages("forecast")
install.packages("SparkR")
'c:\Program Files\spark-2.2.0-bin-hadoop2.7\'
Sys.setenv(SPARK_HOME = "c:/Program Files/spark-2.2.0-bin-hadoop2.7/")
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
2
sparkR.session()
rdf = data.frame(a =1, b = 10)
DF = createDataFrame(rdf)
0.25^3
0.25^4*30000
30000*0.25
30000*0.25^2
30000*0.25^3
30000*0.25^4
30000*0.25^5
install.packages("SnowballC")
iris
D = iris
View(D)
D = iris3
D = iris
dataset = data.frame(ID = c(1,2,3,4,5,6),X = c(1,1,1,3,3,3))
fit <- lm(X ~ ID, data = dataset)
fitted(fit)
fit
dataset$X1 = fitted(fit)
dataset
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
setwd("C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/")
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
View(data4viz)
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
sparsify
pointsCol
pntSize
pointsSize
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
rrr$Errors[1]
g <-  ggplot()
g = g + labs (title = rrr$Errors[1], caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = sizeWarn),
axis.title=element_text(size =  sizeLabel, colour = colLabel),
axis.text=element_text(size =  sizeTicks),
panel.border = element_blank(), axis.line = element_line())
g
g = g + theme(axis.line = element_blank())
g
g = g + labs (title = rrr$Errors[1], caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = sizeWarn),
axis.title=element_text(size =  sizeLabel, colour = colLabel),
axis.text=element_text(size =  sizeTicks),
panel.border = element_blank(), axis.line = element_line())
g = g + theme(axis.line = element_blank())
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
plotType = 'errors'
rrr$Errors[1]= "aaa hjgjhg jhgjh"
if(plotType == 'errors')
{
g <-  ggplot()
# g = g + labs (title = rrr$Errors[1], caption = NULL) + theme_bw() +
#   theme(plot.title  = element_text(hjust = 0.5, size = sizeWarn),
#         axis.title=element_text(size =  sizeLabel, colour = colLabel),
#         axis.text=element_text(size =  sizeTicks),
#         panel.border = element_blank(), axis.line = element_line())
#
# g = g + theme(axis.line = element_blank())
}
g = g + labs (title = rrr$Errors[1], caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = sizeWarn),
axis.title = element_text(size =  sizeLabel, colour = colLabel),
axis.text = element_text(size =  sizeTicks),
panel.border = element_blank(), axis.line = element_line())
g
g = g + theme(axis.line = element_blank())
g
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
is.null(yuy)
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
TE = data4viz
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
TE = data4viz
TE = data4viz
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
TE = data4viz
TE[10,2]
TE[10,2] = NULL
TE[10,2] = NA
is.na(TE)
sum(is.na(TE))
TE[10,2] = NAN
TE[10,2] = NaN
complete.cases(TE)
sum(!complete.cases(TE))
?complete.cases
nrow(TE)
length(complete.cases(TE))
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
debugSource('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
XX
goodRows
YY
goodRows*goodRows
as.logical( goodRows*goodRows)
sum(!as.logical( goodRows*goodRows))
debugSource('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
debugSource('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
debugSource('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
debugSource('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
XX[10,1]
XX[10,1] = NA
View(XX)
View(Values)
XX = Values
XX = RemoveNonNumeric(XX)
View(XX)
View(as.data.frame(XX[goodRows,]))
?subset
class(XX)
View(XX)
AA = subset(XX,goodRows)
View(AA)
nrows(AA)
nrow(AA)
nrow(XX)
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
?lofactor
?cooks.distance
as.numeric("2")
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
rnorm(100,100)
rounr(1.1)
round(1.1)
N = 50
y1 = seq(1,50)
y2 = seq(51,100)
x1 = rnorm(25)
x2 = rnorm(25) + 10
x3 = rnorm(25)
x4 = rnorm(25) + 10
dfLOF = data.frame(ID = c(seq(1,50), seq(56,105)), x1 = c(x1,x2,x3,x4))
plot(dfLOF)
dfLOF[25,40] = 5
dfLOF[25,40]
dfLOF
dfLOF[25,2] = 4
plot(dfLOF)
dfLOF[25,80] = 6
plot(dfLOF)
dfLOF[80,2] = 6
plot(dfLOF)
source('C:/Users/boefraty/projects/PBI/R/custom_R_visuals/outliersDetection/script.r')
library("RCurl")
library("rjson")
install.packages("RCurl")
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
requestFailed = function(headers) {
return (headers["status"] >= 400)
}
printHttpError = function(headers, result) {
print(paste("The request failed with status code:", headers["status"], sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
print(fromJSON(result))}
}
saveBlobToFile = function(blobUrl, resultsLabel) {
output_file = "myresults.csv" # Replace this with the location you would like to use for your output file
print(paste("Reading the result from", blobUrl, sep=" "))
blobContent = getURL(blobUrl)
fc = file(output_file)
write(blobContent, fc)
close(fc)
print(paste(resultsLabel, " have been written to the file", output_file, sep=" "))
}
source('C:/Users/boefraty/projects/PBI/R/AML/tit.R')
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit.R')
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit.R')
install.packages("RCurl")
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit.R')
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit.R')
